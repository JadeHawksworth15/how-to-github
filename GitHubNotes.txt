Project: GitHub_Training_13Sept

# Finds working directory
cmd //c cd

# Sets working directory
cd  /c/Users/Jade/Documents/GitHub

# Configure to register users ID
$ git config --global user.email "you@example.com"
$ git config --global user.name "Your Name"

# Git = time machine
# GitHub = back-up for timelines

#Start a 'timeline' aka repository folder
$ git init

# Git is not remote it is working within local computer
# Developing area = area wth git folder i.e. Documents/GitHub/
# Git repository = local repository with timeline which Git organises
# Staging area = channel between developing area and repository which facilitates preperation and implication of timeline

# Version messages --> why, what, how, effects, limitations
# Git keeps track of which lines change and what the original file was
$ git commit -m "meaningful descriptive message"

# if you don't use -m or put a message then you get error 'nothing to commit'
# if you don't put -m but do put a message you get error 'pathspec......did not match any file(s)
# If you dont put a message the you get error ' switch 'm' requires a value

$ git commit -m "You have to write a message like this"
# Error: nothing to commit
# You have to make changes to file and then save changes before you can add a new message and this message tells you what the changes were

# To add changes you have to save changes - use function below
$ git add GitHubNotes.txt
# Then you can add add message
# If you want to restore before changes then use function
$ git restore file GitHubNotes.txt

# Teamwork activity --> How can I see a history of my timeline? 
# First answer for retrieving individual commands is using up arrow, followed by up and down to cycle through the previous commands
# But for whole history you have to navigate to repository
# Online you can use GitHub GUI
# Navigating directly to the commits page of a repository
# Clicking on a file, then clicking History, to get to the commit history for a specific file
# To pull up the edits in GitBash, use following function
$ git log
# git log function gives you an ID code, who made changes and when changes were made

# You can search for code or files using following commands
$ in:file
$ in:path

# To find history of timeline
$ git checkout c7497ca15d0db83ba2f6a9b20f7f9be622d84f1b 
# Where code is the code identifying the commitgit
$ git checkout master takes you back up one commit
# Remember to add and commit regularly

# A head in Git is the tip (i.e. latest commit) of a branch 

# You can make changes to earlier timelines BUT DON'T

# For a new branch 
$ git branch -f
# To switch branches
$ git switch -c <branch>
# Or following command for cancelling switch
$ git switch -

# How to create a repository online
$ git init
# Readme fle gives you info about repository
$ git add README.md
$ git commit -m "first commit"
$ git branch -M main
$ git remote add origin https://github.com/JadeHawksworth15/how-to-github.git
$ git push -u origin main

# To ignore some files from repository (do not upload large files to Github like big data files)
# Create a txt file with a list of files to ignore called .gitignore
# If Github doesn't ignore files maybe .gitignore has a .txt after it
# Rename using following command
$ mv .gitignore.txt .gitignore

# Check if Git files are commited (saved) and if files are untracked using 
$ git status
# This tells you which files are committed and untracked
# Working directory clean means that there are no files which need to be staged/committed/are untracked

# How to list files in directory
$ ls -a

# Last part of GitHub is [Github on a remote computer]
# So the two have to be linked together
$ git remote add <bridge name AKA origin> <URL>
# E.g. 
$ git remote add origin git@github.com:JadeHawksworth15/how-to-github.git
$ git branch -M main
$ git push -u origin main

# Deleting a local repository
$ rm -rf GitHub/

# Restoring a local repository from the remote
$ git clone <ssh address>
$ git clone git@https://github.com/JadeHawksworth15/how-to-github

# Restoring both repositories after a 'freak accident'
$ git revert --no-commit 4640e68a2ca28d67684016c5c813630fbb3de149
#Where code is code from commit you want to reverse, in git log
$ git status
$ git revert --continue
$ git push -u origin master

# You can add collaborators from Github website
# Settings/collaborators

# To add to Tinne's project add her as a collab, clone it and then push back
$ git push -u origin master

# To branch so Tinne and I can use the same file without interference
$ git branch <name>

# CONFLIIIIICT baby


ALL CODE
$ git config --global user.email "you@example.com"
$ git config --global user.name "Your Name"
$ cd  /c/Users/Jade/Documents/GitHub
$ git init
$ git commit -m "meaningful descriptive message"
$ git add GitHubNotes.txt
$ git commit -m "More messages based on code"
$ git log
$ git checkout
$ git branch <name>
$ git switch
$ ls -a
$ rm -rf GitHub/
$ git clone git@https://github.com/JadeHawksworth15/how-to-github
$ git revert --no-commit 4640e68a2ca28d67684016c5c813630fbb3de149
$ git status
$ git revert --continue
$ git push -u origin master

Escape / :wq!










